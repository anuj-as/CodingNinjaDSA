import java.util.*;

public class Solution {
	/*
	 * BinaryTreeNode class
	 * 
	 * class BinaryTreeNode<T>
	 * {
	 * T data;
	 * BinaryTreeNode<T> left;
	 * BinaryTreeNode<T> right;
	 * public BinaryTreeNode(T data)
	 * {
	 * this.data = data;
	 * }
	 * }
	 */
	/*
	 * LinkedListNode Class
	 * class LinkedListNode<T>
	 * {
	 * T data;
	 * LinkedListNode<T> next;
	 * public LinkedListNode(T data)
	 * {
	 * this.data = data;
	 * }
	 * }
	 */
	public static ArrayList<LinkedListNode<Integer>> constructLinkedListForEachLevel(BinaryTreeNode<Integer> root) {
		// Write your code here
		if (root == null)
			return null;
		Queue<BinaryTreeNode<Integer>> pendingChildren = new LinkedList<>();
		ArrayList<LinkedListNode<Integer>> ans = new ArrayList<>();
		pendingChildren.add(root);
		pendingChildren.add(null);
		LinkedListNode<Integer> head = null, tail = null;
		while (!pendingChildren.isEmpty()) {
			BinaryTreeNode<Integer> front = pendingChildren.poll();
			if (front != null) {
				if (head == null) {
					head = new LinkedListNode<>(front.data);
					tail = head;
					ans.add(head);
				} else {
					tail.next = new LinkedListNode<>(front.data);
					tail = tail.next;
				}
				if (front.left != null)
					pendingChildren.add(front.left);
				if (front.right != null)
					pendingChildren.add(front.right);
			} else {
				if (pendingChildren.isEmpty())
					break;
				else {
					pendingChildren.add(null);
					tail.next = null;
					head = null;
					tail = null;
				}
			}
		}
		return ans;
	}
}
