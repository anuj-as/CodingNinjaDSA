/*
 * Binary Tree Node class
 * 
 * class BinaryTreeNode<T> { 
 * 		T data; 
 * 		BinaryTreeNode<T> left; 
 * 		BinaryTreeNode<T> right;
 * 		public BinaryTreeNode(T data) 
 * 		{ 
 * 			this.data = data; 
 * 		}
 * }
 */

/* 
* Main Method being used internally
*	public static void main(String[] args) throws IOException {
*		BinarySearchTree bst = new BinarySearchTree();
*		int choice, input;
*		int q = Integer.parseInt(br.readLine());
*		while (q-- > 0) {
*			st = new StringTokenizer(br.readLine());
*			choice = Integer.parseInt(st.nextToken());
*			switch (choice) {
*			case 1:
*				input = Integer.parseInt(st.nextToken());
*				bst.insert(input);
*				break;
*				case 2:
*				input = Integer.parseInt(st.nextToken());
*				bst.remove(input);
*				break;
*			case 3:
*				input = Integer.parseInt(st.nextToken());
*				System.out.println(bst.search(input));
*				break;
*			default:
*				bst.printTree();
*				break;
*			}
*		}
*	}
*/

public class BinarySearchTree {
    private BinaryTreeNode<Integer> root;

    private BinaryTreeNode<Integer> insert(BinaryTreeNode<Integer> root, int data) {
        if (root == null)
            return new BinaryTreeNode<Integer>(data);
        if (data <= root.data)
            root.left = insert(root.left, data);
        else
            root.right = insert(root.right, data);
        return root;
    }

    public void insert(int data) {
        // Implement the insert() function
        root = insert(root, data);
    }

    private int minimum(BinaryTreeNode<Integer> root) {
        if (root == null)
            return Integer.MAX_VALUE;
        int leftAns = minimum(root.left);
        int rightAns = minimum(root.right);
        return Math.min(Math.min(root.data, leftAns), rightAns);
    }

    private BinaryTreeNode<Integer> remove(BinaryTreeNode<Integer> root, int data) {
        if (root == null)
            return null;
        if (data < root.data) {
            root.left = remove(root.left, data);
            return root;
        } else if (data > root.data) {
            root.right = remove(root.right, data);
            return root;
        } else {
            if (root.left == null && root.right == null)
                return null;
            else if (root.left != null && root.right == null)
                return root.left;
            else if (root.left == null && root.right != null)
                return root.right;
            else {
                int min = minimum(root.right);
                root.data = min;
                root.right = remove(root.right, min);
                return root;
            }
        }
    }

    public void remove(int data) {
        // Implement the remove() function
        root = remove(root, data);
    }

    private void print(BinaryTreeNode<Integer> root) {
        if (root == null)
            return;
        System.out.print(root.data + ":");
        if (root.left != null)
            System.out.print("L:" + root.left.data + ",");
        if (root.right != null)
            System.out.print("R:" + root.right.data);
        System.out.println();
        print(root.left);
        print(root.right);
    }

    public void printTree() {
        // Implement the printTree() function
        print(root);
    }

    private boolean search(BinaryTreeNode<Integer> root, int data) {
        if (root == null)
            return false;
        if (root.data == data)
            return true;
        else if (data < root.data)
            return search(root.left, data);
        else
            return search(root.right, data);
    }

    public boolean search(int data) {
        // Implement the search() function
        return search(root, data);
    }

}
