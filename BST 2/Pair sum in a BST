import java.util.ArrayList;

import java.util.Collections;

public class Solution {
	/*
	 * BinaryTreeNode class
	 * 
	 * class BinaryTreeNode<T>
	 * {
	 * T data;
	 * BinaryTreeNode<T> left;
	 * BinaryTreeNode<T> right;
	 * public BinaryTreeNode(T data)
	 * {
	 * this.data = data;
	 * }
	 * }
	 */

	private static ArrayList<Integer> convertBSTToArr(BinaryTreeNode<Integer> root) {
		if (root == null)
			return new ArrayList<>();
		ArrayList<Integer> arr = new ArrayList<>();
		ArrayList<Integer> leftArr = convertBSTToArr(root.left);
		if (!leftArr.isEmpty()) {
			arr.addAll(leftArr);
		}
		arr.add(root.data);
		ArrayList<Integer> rightArr = convertBSTToArr(root.right);
		if (!rightArr.isEmpty()) {
			arr.addAll(rightArr);
		}
		return arr;
	}

	public static void printNodesSumToS(BinaryTreeNode<Integer> root, int s) {
		// Write your code here
		if (root == null)
			return;
		ArrayList<Integer> arr = convertBSTToArr(root);
		Collections.sort(arr);
		printNodesSumToS(arr, s);
	}

	private static void printNodesSumToS(ArrayList<Integer> arr, int s) {
		int i = 0, j = arr.size() - 1;
		while (i < j) {
			int val1 = arr.get(i);
			int val2 = arr.get(j);
			if (val1 + val2 > s)
				j--;
			else if (val1 + val2 < s)
				i++;
			else{
				System.out.println(val1 +" "+ val2);
				i++;
				j--;
			}
		}
	}

}
