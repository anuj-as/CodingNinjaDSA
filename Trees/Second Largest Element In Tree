public class Solution {

	/*
	 * TreeNode structure
	 * 
	 * class TreeNode<T> {
	 * T data;
	 * ArrayList<TreeNode<T>> children;
	 * 
	 * TreeNode(T data){
	 * this.data = data;
	 * children = new ArrayList<TreeNode<T>>();
	 * }
	 * }
	 */
	static class Pair<T> {
		T first;
		T second;

		Pair(T first, T second) {
			this.first = first;
			this.second = second;
		}
	}

	public static TreeNode<Integer> findSecondLargest(TreeNode<Integer> root) {
		// Write your code here
		return findSecondLargestHelper(root).second;
	}

	private static Pair<TreeNode<Integer>> findSecondLargestHelper(TreeNode<Integer> root) {
		if (root == null)
			return new Pair<TreeNode<Integer>>(null, null);
		Pair<TreeNode<Integer>> ans = new Pair<>(root, null);

		for (TreeNode<Integer> child : root.children) {
			Pair<TreeNode<Integer>> childAns = findSecondLargestHelper(child);
			if (childAns.first.data > ans.first.data) {
				if (childAns.second == null || childAns.second.data < ans.first.data) {
					ans.second = ans.first;
					ans.first = childAns.first;
				} else {
					ans.first = childAns.first;
					ans.second = childAns.second;
				}
			} else if (childAns.first.data == ans.first.data && childAns.second != null) {
				if (ans.second == null || childAns.second.data > ans.second.data) {
					ans.second = childAns.second;
				}
			} else if (ans.first.data != childAns.first.data && (ans.second == null || childAns.first.data > ans.second.data)) {
				ans.second = childAns.first;
			}
		}
		return ans;
	}
}
